// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/21/2024 23:57:35"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          display_group
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module display_group_vlg_vec_tst();
// constants                                           
// general purpose registers
reg _840_Hz;
reg [1:0] dozens;
reg [1:0] state;
reg [3:0] units;
// wires                                               
wire [3:0] digits;
wire [7:0] segments;

// assign statements (if any)                          
display_group i1 (
// port map - connection between master ports and signals/registers   
	._840_Hz(_840_Hz),
	.digits(digits),
	.dozens(dozens),
	.segments(segments),
	.state(state),
	.units(units)
);
initial 
begin 
#1280000 $finish;
end 

// _840_Hz
always
begin
	_840_Hz = 1'b0;
	_840_Hz = #10000 1'b1;
	#10000;
end 
// dozens[ 1 ]
always
begin
	dozens[1] = 1'b0;
	dozens[1] = #160000 1'b1;
	#160000;
end 
// dozens[ 0 ]
always
begin
	dozens[0] = 1'b0;
	dozens[0] = #80000 1'b1;
	#80000;
end 
// state[ 1 ]
always
begin
	state[1] = 1'b0;
	state[1] = #640000 1'b1;
	#640000;
end 
// state[ 0 ]
always
begin
	state[0] = 1'b0;
	state[0] = #320000 1'b1;
	#320000;
end 
// units[ 3 ]
always
begin
	units[3] = 1'b0;
	units[3] = #160000 1'b1;
	#160000;
end 
// units[ 2 ]
always
begin
	units[2] = 1'b0;
	units[2] = #80000 1'b1;
	#80000;
end 
// units[ 1 ]
always
begin
	units[1] = 1'b0;
	units[1] = #40000 1'b1;
	#40000;
end 
// units[ 0 ]
always
begin
	units[0] = 1'b0;
	units[0] = #20000 1'b1;
	#20000;
end 
endmodule

